(()=>{"use strict";var e={baseUrl:"https://nomoreparties.co/v1/wff-cohort-14",headers:{authorization:"ab022e1a-b80f-4939-8f48-ddab79fbed68","Content-Type":"application/json"}},t=function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))},n=function(n){return fetch("".concat(e.baseUrl,"/cards/likes/").concat(n),{method:"PUT",headers:e.headers}).then(t)},r=function(n){return fetch("".concat(e.baseUrl,"/cards/likes/").concat(n),{method:"DELETE",headers:e.headers}).then(t)},o=function(e,t,n,r,o,c,a){var i=t.querySelector(".places__item").cloneNode(!0),l=i.querySelector(".card__image"),s=i.querySelector(".card__title"),d=i.querySelector(".card__delete-button"),f=i.querySelector(".card__like-button"),p=i.querySelector(".card__like-container");return l.src=e.link,l.alt=e.name,s.textContent=e.name,e.owner._id===c?d.addEventListener("click",(function(){n(e._id,i)})):d.style.display="none",l.addEventListener("click",(function(){r(e.name,e.link)})),f.addEventListener("click",(function(){a(f,e._id,p)})),o(p,e.likes.length),e.likes.some((function(e){return e._id===c}))&&u(f),i},c=function(n,r){(function(n){return fetch("".concat(e.baseUrl,"/cards/").concat(n),{method:"DELETE",headers:e.headers}).then(t)})(n).then((function(){a(r)})).catch((function(e){console.error(e)}))},a=function(e){e.remove()},i=function(e,t,o){(e.classList.contains("card__like-button_is-active")?r:n)(t).then((function(t){u(e),l(o,t.likes.length)})).catch((function(e){return console.error(e)}))},u=function(e){e.classList.toggle("card__like-button_is-active")},l=function(e,t){e.textContent=t},s=function(e){e.classList.add("popup_is-opened"),e.classList.add("popup_is-animated");var t=e.querySelector(".popup__close");window.addEventListener("keydown",p),e.addEventListener("click",m),t.addEventListener("click",f)},d=function(e){e.classList.remove("popup_is-opened"),window.removeEventListener("keydown",p),e.removeEventListener("click",m),e.querySelector(".popup__close").removeEventListener("click",f)},f=function(e){var t=document.querySelector(".popup_is-opened");d(t)},p=function(e){if("Escape"===e.key){var t=document.querySelector(".popup_is-opened");d(t)}},m=function(e){e.target===e.currentTarget&&d(e.currentTarget)},v=function(e,t,n,r){var o=e.querySelector(".".concat(t.id,"-error"));t.classList.add(r.inputErrorClass),o.classList.add(r.errorClass),o.textContent=n},y=function(e,t,n){var r=e.querySelector(".".concat(t.id,"-error"));t.classList.remove(n.inputErrorClass),r.classList.remove(n.errorClass),r.textContent=""},h=function(e,t,n){!function(e){return e.some((function(e){return!e.validity.valid}))}(e)?(t.disabled=!1,t.classList.remove(n.inactiveButtonClass)):(t.disabled=!0,t.classList.add(n.inactiveButtonClass))},_=function(e,t){var n=Array.from(e.querySelectorAll(t.inputSelector)),r=e.querySelector(t.submitButtonSelector);n.forEach((function(n){y(e,n,t)})),h(n,r,t)};function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var S="",E="",k={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button-not-active",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error-active"},q=document.querySelector(".places__list"),L=document.querySelector(".popup_type_edit"),g=document.querySelector(".profile__edit-button"),C=document.querySelector(".profile__add-button"),A=document.querySelector(".popup_type_new-card"),w=document.querySelector(".profile__title"),x=document.querySelector(".profile__description"),T=document.forms["edit-profile"],U=T.elements.name,j=T.elements.description,O=document.forms["new-place"],B=O.elements["place-name"],P=O.elements.link,D=document.querySelector(".profile__image"),M=document.querySelector(".popup_type_avatar"),N=document.forms["avatar-profile"],I=N.elements.link,J=document.querySelector("#card-template").content,G=document.querySelector(".popup__image"),H=document.querySelector(".popup__caption"),V=document.querySelector(".popup_type_image"),z=function(e,t){G.src=t,H.textContent=e,G.alt=e,s(V)};!function(e){Array.from(document.querySelectorAll(e.formSelector)).forEach((function(t){!function(e,t){var n=Array.from(e.querySelectorAll(t.inputSelector)),r=e.querySelector(t.submitButtonSelector);n.forEach((function(o){o.addEventListener("input",(function(){!function(e,t,n){if(t.validity.patternMismatch)return t.setCustomValidity(t.dataset.errorMessage),void v(e,t,t.validationMessage,n);t.setCustomValidity(""),y(e,t,n),t.validity.valid?y(e,t,n):v(e,t,t.validationMessage,n)}(e,o,t),h(n,r,t)}))}))}(t,e)}))}(k),g.addEventListener("click",(function(){_(T,k),s(L),U.value=w.textContent,j.value=x.textContent})),C.addEventListener("click",(function(){B.value="",P.value="",_(O,k),s(A)})),O.addEventListener("submit",(function(n){var r;n.preventDefault(),$(n.submitter,!0),(r={name:B.value,link:P.value},fetch("".concat(e.baseUrl,"/cards"),{method:"POST",headers:e.headers,body:JSON.stringify(r)}).then(t)).then((function(e){var t=o(e,J,c,z,l,E,i);q.prepend(t),O.reset(),d(A)})).catch((function(e){console.error(e)})).finally((function(){$(n.submitter,!1)}))})),T.addEventListener("submit",(function(n){var r;n.preventDefault(),$(n.submitter,!0),(r={name:U.value,about:j.value},fetch("".concat(e.baseUrl,"/users/me"),{method:"PATCH",headers:e.headers,body:JSON.stringify(r)}).then(t)).then((function(e){w.textContent=e.name,x.textContent=e.about})).catch((function(e){console.error(e)})).finally((function(){$(n.submitter,!1)})),d(L)})),Promise.all([fetch("".concat(e.baseUrl,"/users/me"),{method:"GET",headers:e.headers}).then(t),fetch("".concat(e.baseUrl,"/cards"),{method:"GET",headers:e.headers}).then(t)]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,c,a,i=[],u=!0,l=!1;try{if(c=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=c.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){l=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],u=r[1];w.textContent=a.name,x.textContent=a.about,S=a.avatar,E=a._id,D.setAttribute("style","background-image: url('".concat(S,"')")),u.forEach((function(e){var t=o(e,J,c,z,l,a._id,i);q.append(t)}))})).catch((function(e){console.error(e)})),D.addEventListener("click",(function(){I.value="",_(N,k),s(M)})),N.addEventListener("submit",(function(n){var r;n.preventDefault(),D.setAttribute("style","background-image: url('".concat(I.value,"')")),$(n.submitter,!0),(r=I.value,fetch("".concat(e.baseUrl,"/users/me/avatar"),{method:"PATCH",headers:e.headers,body:JSON.stringify({avatar:r})}).then(t)).catch((function(e){console.error(e)})).finally((function(){$(n.submitter,!1)})),N.reset(),d(M)}));var $=function(e,t){e.textContent=t?"Сохранение...":"Сохранить"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,